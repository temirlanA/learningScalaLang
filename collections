package Main

import scala.collection.immutable.TreeMap
import scala.collection.mutable

object Main extends App {
  val mutaSet = mutable.Set(1, 2, 3)
  println(mutaSet)


  val text = "See Spot run! Run, spot. Run!"
  val wordsArray = text.split("[ !,.]+")
  println(wordsArray.toList)

  val map = mutable.Map.empty[String,Int]
  map("Hello") = 1
  map("There") = 2
  println(map)

  def countWords(text: String):mutable.Map[String,Int] = {
    var Oldcount = 0
    val counts = mutable.Map.empty[String, Int]
    for (rawWord <- text.split("[ ,!.]+")) {
      val word = rawWord.toLowerCase
      if (rawWord.contains(word)) {
        Oldcount = Oldcount + 1
        counts(word) = Oldcount
      }
    }

    counts
  }

  println(countWords(text))


  var tm = TreeMap(3 -> 'x', 1 -> 'x', 4 -> 'x')//sorted Map
  tm += (2 -> 'x')
  println(tm)
  
  
  val Mutablepeople = scala.collection.mutable.Set("Nancy", "Jane")
  println(Mutablepeople)
  Mutablepeople += "Bob"
  println(Mutablepeople)
  Mutablepeople -= "Nancy"
  val people = Set.empty ++ Mutablepeople
  println(people)
  
  
  var capital = Map("US" -> "Washington", "France" -> "Paris")
  capital += ("Japan" -> "Tokyo")
  println(capital("France"))
  
  val colors = List("blue", "yellow", "red", "green")
  val treeSet = scala.collection.immutable.TreeSet[String]() ++ colors
  println(treeSet)
  println(treeSet.toList)
  println(treeSet.toArray)
}



